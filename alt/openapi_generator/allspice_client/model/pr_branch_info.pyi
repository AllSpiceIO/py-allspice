# coding: utf-8

"""
    AllSpice API.

    This documentation describes the AllSpice API.  # noqa: E501

    The version of the OpenAPI document: gitea+v1.19.2-52-gc95a358b1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from allspice_client import schemas  # noqa: F401


class PRBranchInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PRBranchInfo information about a branch
    """


    class MetaOapg:
        
        class properties:
            label = schemas.StrSchema
            ref = schemas.StrSchema
        
            @staticmethod
            def repo() -> typing.Type['Repository']:
                return Repository
            repo_id = schemas.Int64Schema
            sha = schemas.StrSchema
            __annotations__ = {
                "label": label,
                "ref": ref,
                "repo": repo,
                "repo_id": repo_id,
                "sha": sha,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ref"]) -> MetaOapg.properties.ref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repo"]) -> 'Repository': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["repo_id"]) -> MetaOapg.properties.repo_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sha"]) -> MetaOapg.properties.sha: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["label", "ref", "repo", "repo_id", "sha", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ref"]) -> typing.Union[MetaOapg.properties.ref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repo"]) -> typing.Union['Repository', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["repo_id"]) -> typing.Union[MetaOapg.properties.repo_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sha"]) -> typing.Union[MetaOapg.properties.sha, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["label", "ref", "repo", "repo_id", "sha", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        ref: typing.Union[MetaOapg.properties.ref, str, schemas.Unset] = schemas.unset,
        repo: typing.Union['Repository', schemas.Unset] = schemas.unset,
        repo_id: typing.Union[MetaOapg.properties.repo_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sha: typing.Union[MetaOapg.properties.sha, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PRBranchInfo':
        return super().__new__(
            cls,
            *_args,
            label=label,
            ref=ref,
            repo=repo,
            repo_id=repo_id,
            sha=sha,
            _configuration=_configuration,
            **kwargs,
        )

from allspice_client.model.repository import Repository
