# generated by fastapi-codegen:
#   filename:  allspice.openapi.json
#   timestamp: 2023-03-14T19:23:26+00:00

from __future__ import annotations

from datetime import datetime
from typing import List, Optional, Union

from fastapi import FastAPI, Path, Query

from .models import (
    AccessToken,
    ActivityPub,
    AddCollaboratorOption,
    AddTimeOption,
    AnnotatedTag,
    APIError,
    Attachment,
    Branch,
    BranchProtection,
    ChangedFile,
    CombinedStatus,
    Comment,
    Commit,
    CommitStatus,
    ContentsResponse,
    CreateAccessTokenOption,
    CreateBranchProtectionOption,
    CreateBranchRepoOption,
    CreateEmailOption,
    CreateFileOptions,
    CreateForkOption,
    CreateGPGKeyOption,
    CreateHookOption,
    CreateIssueCommentOption,
    CreateIssueOption,
    CreateKeyOption,
    CreateLabelOption,
    CreateMilestoneOption,
    CreateOAuth2ApplicationOptions,
    CreateOrgOption,
    CreatePullRequestOption,
    CreatePullReviewOptions,
    CreatePushMirrorOption,
    CreateReleaseOption,
    CreateRepoOption,
    CreateStatusOption,
    CreateTagOption,
    CreateTeamOption,
    CreateUserOption,
    CreateWikiPageOptions,
    Cron,
    DeleteEmailOption,
    DeleteFileOptions,
    DeployKey,
    DiffType1,
    DiffType2,
    DiffType4,
    DiffType5,
    DismissPullReviewOptions,
    EditAttachmentOptions,
    EditBranchProtectionOption,
    EditDeadlineOption,
    EditGitHookOption,
    EditHookOption,
    EditIssueCommentOption,
    EditIssueOption,
    EditLabelOption,
    EditMilestoneOption,
    EditOrgOption,
    EditPullRequestOption,
    EditReactionOption,
    EditReleaseOption,
    EditRepoOption,
    EditTeamOption,
    EditUserOption,
    Email,
    FileDeleteResponse,
    FileResponse,
    GeneralAPISettings,
    GeneralAttachmentSettings,
    GeneralRepoSettings,
    GeneralUISettings,
    GenerateRepoOption,
    GitBlobResponse,
    GitHook,
    GitTreeResponse,
    GPGKey,
    Hook,
    Issue,
    IssueDeadline,
    IssueLabelsOption,
    IssueTemplate,
    Label,
    MarkdownOption,
    MergePullRequestOption,
    MigrateRepoOptions,
    Milestone,
    NodeInfo,
    Note,
    NotificationCount,
    NotificationThread,
    OAuth2Application,
    Organization,
    OrganizationPermissions,
    OrgsOrgTeamsSearchGetResponse,
    Package,
    PackageFile,
    PublicKey,
    PullRequest,
    PullReview,
    PullReviewComment,
    PullReviewRequestOptions,
    PushMirror,
    Reaction,
    Reference,
    Release,
    RepoCollaboratorPermission,
    Repository,
    ReposOwnerRepoLanguagesGetResponse,
    RepoTopicOptions,
    SearchResults,
    ServerVersion,
    Sort,
    Sort2,
    Sort3,
    State2,
    State3,
    State4,
    State6,
    StopWatch,
    Style1,
    SubjectType,
    SubjectType1,
    SubjectType2,
    SubjectType3,
    SubmitPullReviewOptions,
    Tag,
    Team,
    TimelineComment,
    TopicName,
    TopicResponse,
    TrackedTime,
    TransferRepoOption,
    Type2,
    Type4,
    UpdateFileOptions,
    User,
    UserHeatmapData,
    UserSettings,
    UserSettingsOptions,
    UsersSearchGetResponse,
    WatchInfo,
    Whitespace1,
    WikiCommitList,
    WikiPage,
    WikiPageMetaData,
)

app = FastAPI(
    title='AllSpice API.',
    description='This documentation describes the AllSpice API.',
    license={'name': 'MIT', 'url': 'http://opensource.org/licenses/MIT'},
    version='1.17.4+7-834-g8e36e32f5',
    servers=[{'url': '/api/v1'}],
)


@app.get(
    '/activitypub/user/{username}', response_model=ActivityPub, tags=['activitypub']
)
def activitypub_person(username: str) -> ActivityPub:
    """
    Returns the Person actor for a user
    """
    pass


@app.post(
    '/activitypub/user/{username}/inbox', response_model=None, tags=['activitypub']
)
def activitypub_person_inbox(username: str) -> None:
    """
    Send to the inbox
    """
    pass


@app.get('/admin/cron', response_model=List[Cron], tags=['admin'])
def admin_cron_list(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[Cron]:
    """
    List cron tasks
    """
    pass


@app.post('/admin/cron/{task}', response_model=None, tags=['admin'])
def admin_cron_run(task: str) -> None:
    """
    Run cron task
    """
    pass


@app.get('/admin/orgs', response_model=List[Organization], tags=['admin'])
def admin_get_all_orgs(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[Organization]:
    """
    List all organizations
    """
    pass


@app.get('/admin/unadopted', response_model=List[str], tags=['admin'])
def admin_unadopted_list(
    page: Optional[int] = None,
    limit: Optional[int] = None,
    pattern: Optional[str] = None,
) -> List[str]:
    """
    List unadopted repositories
    """
    pass


@app.post('/admin/unadopted/{owner}/{repo}', response_model=None, tags=['admin'])
def admin_adopt_repository(owner: str, repo: str = ...) -> None:
    """
    Adopt unadopted files as a repository
    """
    pass


@app.delete('/admin/unadopted/{owner}/{repo}', response_model=None, tags=['admin'])
def admin_delete_unadopted_repository(owner: str, repo: str = ...) -> None:
    """
    Delete unadopted files
    """
    pass


@app.get('/admin/users', response_model=List[User], tags=['admin'])
def admin_get_all_users(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List all users
    """
    pass


@app.post(
    '/admin/users',
    response_model=None,
    responses={'201': {'model': User}},
    tags=['admin'],
)
def admin_create_user(body: CreateUserOption = None) -> Union[None, User]:
    """
    Create a user
    """
    pass


@app.delete('/admin/users/{username}', response_model=None, tags=['admin'])
def admin_delete_user(username: str) -> None:
    """
    Delete a user
    """
    pass


@app.patch('/admin/users/{username}', response_model=User, tags=['admin'])
def admin_edit_user(username: str, body: EditUserOption = None) -> User:
    """
    Edit an existing user
    """
    pass


@app.post(
    '/admin/users/{username}/keys',
    response_model=None,
    responses={'201': {'model': PublicKey}},
    tags=['admin'],
)
def admin_create_public_key(
    username: str, body: CreateKeyOption = None
) -> Union[None, PublicKey]:
    """
    Add a public key on behalf of a user
    """
    pass


@app.delete('/admin/users/{username}/keys/{id}', response_model=None, tags=['admin'])
def admin_delete_user_public_key(username: str, id: int = ...) -> None:
    """
    Delete a user's public key
    """
    pass


@app.post(
    '/admin/users/{username}/orgs',
    response_model=None,
    responses={'201': {'model': Organization}},
    tags=['admin'],
)
def admin_create_org(
    username: str, body: CreateOrgOption = ...
) -> Union[None, Organization]:
    """
    Create an organization
    """
    pass


@app.post(
    '/admin/users/{username}/repos',
    response_model=None,
    responses={'201': {'model': Repository}},
    tags=['admin'],
)
def admin_create_repo(
    username: str, body: CreateRepoOption = ...
) -> Union[None, Repository]:
    """
    Create a repository on behalf of a user
    """
    pass


@app.post('/markdown', response_model=str, tags=['miscellaneous'])
def render_markdown(body: MarkdownOption = None) -> str:
    """
    Render a markdown document as HTML
    """
    pass


@app.post('/markdown/raw', response_model=str, tags=['miscellaneous'])
def render_markdown_raw() -> str:
    """
    Render raw markdown as HTML
    """
    pass


@app.get('/nodeinfo', response_model=NodeInfo, tags=['miscellaneous'])
def get_node_info() -> NodeInfo:
    """
    Returns the nodeinfo of the Gitea application
    """
    pass


@app.get(
    '/notifications', response_model=List[NotificationThread], tags=['notification']
)
def notify_get_list(
    all: Optional[bool] = None,
    status_types: Optional[List[str]] = Query(None, alias='status-types'),
    subject_type: Optional[List[SubjectType1]] = Query(None, alias='subject-type'),
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[NotificationThread]:
    """
    List users's notification threads
    """
    pass


@app.put(
    '/notifications',
    response_model=None,
    responses={'205': {'model': List[NotificationThread]}},
    tags=['notification'],
)
def notify_read_list(
    last_read_at: Optional[datetime] = None,
    all: Optional[str] = None,
    status_types: Optional[List[str]] = Query(None, alias='status-types'),
    to_status: Optional[str] = Query(None, alias='to-status'),
) -> Union[None, List[NotificationThread]]:
    """
    Mark notification threads as read, pinned or unread
    """
    pass


@app.get('/notifications/new', response_model=NotificationCount, tags=['notification'])
def notify_new_available() -> NotificationCount:
    """
    Check if unread notifications exist
    """
    pass


@app.get(
    '/notifications/threads/{id}',
    response_model=NotificationThread,
    tags=['notification'],
)
def notify_get_thread(id: str) -> NotificationThread:
    """
    Get notification thread by ID
    """
    pass


@app.patch(
    '/notifications/threads/{id}',
    response_model=None,
    responses={'205': {'model': NotificationThread}},
    tags=['notification'],
)
def notify_read_thread(
    id: str, to_status: Optional[str] = Query('read', alias='to-status')
) -> Union[None, NotificationThread]:
    """
    Mark notification thread as read by ID
    """
    pass


@app.post(
    '/org/{org}/repos',
    response_model=None,
    responses={'201': {'model': Repository}},
    tags=['organization'],
)
def create_org_repo_deprecated(
    org: str, body: CreateRepoOption = None
) -> Union[None, Repository]:
    """
    Create a repository in an organization
    """
    pass


@app.get('/orgs', response_model=List[Organization], tags=['organization'])
def org_get_all(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[Organization]:
    """
    Get list of organizations
    """
    pass


@app.post(
    '/orgs',
    response_model=None,
    responses={'201': {'model': Organization}},
    tags=['organization'],
)
def org_create(body: CreateOrgOption) -> Union[None, Organization]:
    """
    Create an organization
    """
    pass


@app.get('/orgs/{org}', response_model=Organization, tags=['organization'])
def org_get(org: str) -> Organization:
    """
    Get an organization
    """
    pass


@app.delete('/orgs/{org}', response_model=None, tags=['organization'])
def org_delete(org: str) -> None:
    """
    Delete an organization
    """
    pass


@app.patch('/orgs/{org}', response_model=Organization, tags=['organization'])
def org_edit(org: str, body: EditOrgOption = ...) -> Organization:
    """
    Edit an organization
    """
    pass


@app.get('/orgs/{org}/hooks', response_model=List[Hook], tags=['organization'])
def org_list_hooks(
    org: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[Hook]:
    """
    List an organization's webhooks
    """
    pass


@app.post(
    '/orgs/{org}/hooks',
    response_model=None,
    responses={'201': {'model': Hook}},
    tags=['organization'],
)
def org_create_hook(org: str, body: CreateHookOption = ...) -> Union[None, Hook]:
    """
    Create a hook
    """
    pass


@app.get('/orgs/{org}/hooks/{id}', response_model=Hook, tags=['organization'])
def org_get_hook(org: str, id: int = ...) -> Hook:
    """
    Get a hook
    """
    pass


@app.delete('/orgs/{org}/hooks/{id}', response_model=None, tags=['organization'])
def org_delete_hook(org: str, id: int = ...) -> None:
    """
    Delete a hook
    """
    pass


@app.patch('/orgs/{org}/hooks/{id}', response_model=Hook, tags=['organization'])
def org_edit_hook(org: str, id: int = ..., body: EditHookOption = None) -> Hook:
    """
    Update a hook
    """
    pass


@app.get('/orgs/{org}/labels', response_model=List[Label], tags=['organization'])
def org_list_labels(
    org: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[Label]:
    """
    List an organization's labels
    """
    pass


@app.post(
    '/orgs/{org}/labels',
    response_model=None,
    responses={'201': {'model': Label}},
    tags=['organization'],
)
def org_create_label(org: str, body: CreateLabelOption = None) -> Union[None, Label]:
    """
    Create a label for an organization
    """
    pass


@app.get('/orgs/{org}/labels/{id}', response_model=Label, tags=['organization'])
def org_get_label(org: str, id: int = ...) -> Label:
    """
    Get a single label
    """
    pass


@app.delete('/orgs/{org}/labels/{id}', response_model=None, tags=['organization'])
def org_delete_label(org: str, id: int = ...) -> None:
    """
    Delete a label
    """
    pass


@app.patch('/orgs/{org}/labels/{id}', response_model=Label, tags=['organization'])
def org_edit_label(org: str, id: int = ..., body: EditLabelOption = None) -> Label:
    """
    Update a label
    """
    pass


@app.get('/orgs/{org}/members', response_model=List[User], tags=['organization'])
def org_list_members(
    org: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List an organization's members
    """
    pass


@app.get('/orgs/{org}/members/{username}', response_model=None, tags=['organization'])
def org_is_member(org: str, username: str = ...) -> None:
    """
    Check if a user is a member of an organization
    """
    pass


@app.delete(
    '/orgs/{org}/members/{username}', response_model=None, tags=['organization']
)
def org_delete_member(org: str, username: str = ...) -> None:
    """
    Remove a member from an organization
    """
    pass


@app.get('/orgs/{org}/public_members', response_model=List[User], tags=['organization'])
def org_list_public_members(
    org: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List an organization's public members
    """
    pass


@app.get(
    '/orgs/{org}/public_members/{username}', response_model=None, tags=['organization']
)
def org_is_public_member(org: str, username: str = ...) -> None:
    """
    Check if a user is a public member of an organization
    """
    pass


@app.put(
    '/orgs/{org}/public_members/{username}', response_model=None, tags=['organization']
)
def org_publicize_member(org: str, username: str = ...) -> None:
    """
    Publicize a user's membership
    """
    pass


@app.delete(
    '/orgs/{org}/public_members/{username}', response_model=None, tags=['organization']
)
def org_conceal_member(org: str, username: str = ...) -> None:
    """
    Conceal a user's membership
    """
    pass


@app.get('/orgs/{org}/repos', response_model=List[Repository], tags=['organization'])
def org_list_repos(
    org: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[Repository]:
    """
    List an organization's repos
    """
    pass


@app.post(
    '/orgs/{org}/repos',
    response_model=None,
    responses={'201': {'model': Repository}},
    tags=['organization'],
)
def create_org_repo(org: str, body: CreateRepoOption = None) -> Union[None, Repository]:
    """
    Create a repository in an organization
    """
    pass


@app.get('/orgs/{org}/teams', response_model=List[Team], tags=['organization'])
def org_list_teams(
    org: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[Team]:
    """
    List an organization's teams
    """
    pass


@app.post(
    '/orgs/{org}/teams',
    response_model=None,
    responses={'201': {'model': Team}},
    tags=['organization'],
)
def org_create_team(org: str, body: CreateTeamOption = None) -> Union[None, Team]:
    """
    Create a team
    """
    pass


@app.get(
    '/orgs/{org}/teams/search',
    response_model=OrgsOrgTeamsSearchGetResponse,
    tags=['organization'],
)
def team_search(
    org: str,
    q: Optional[str] = None,
    include_desc: Optional[bool] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> OrgsOrgTeamsSearchGetResponse:
    """
    Search for teams within an organization
    """
    pass


@app.get('/packages/{owner}', response_model=List[Package], tags=['package'])
def list_packages(
    owner: str,
    page: Optional[int] = None,
    limit: Optional[int] = None,
    type: Optional[Type2] = None,
    q: Optional[str] = None,
) -> List[Package]:
    """
    Gets all packages of an owner
    """
    pass


@app.get(
    '/packages/{owner}/{type}/{name}/{version}',
    response_model=Package,
    tags=['package'],
)
def get_package(
    owner: str, type: str = ..., name: str = ..., version: str = ...
) -> Package:
    """
    Gets a package
    """
    pass


@app.delete(
    '/packages/{owner}/{type}/{name}/{version}', response_model=None, tags=['package']
)
def delete_package(
    owner: str, type: str = ..., name: str = ..., version: str = ...
) -> None:
    """
    Delete a package
    """
    pass


@app.get(
    '/packages/{owner}/{type}/{name}/{version}/files',
    response_model=List[PackageFile],
    tags=['package'],
)
def list_package_files(
    owner: str, type: str = ..., name: str = ..., version: str = ...
) -> List[PackageFile]:
    """
    Gets all files of a package
    """
    pass


@app.get('/repos/issues/search', response_model=List[Issue], tags=['issue'])
def issue_search_issues(
    state: Optional[str] = None,
    labels: Optional[str] = None,
    milestones: Optional[str] = None,
    q: Optional[str] = None,
    priority_repo_id: Optional[int] = None,
    type: Optional[str] = None,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    assigned: Optional[bool] = None,
    created: Optional[bool] = None,
    mentioned: Optional[bool] = None,
    review_requested: Optional[bool] = None,
    owner: Optional[str] = None,
    team: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[Issue]:
    """
    Search for issues across the repositories that the user has access to
    """
    pass


@app.post(
    '/repos/migrate',
    response_model=None,
    responses={'201': {'model': Repository}},
    tags=['repository'],
)
def repo_migrate(body: MigrateRepoOptions = None) -> Union[None, Repository]:
    """
    Migrate a remote git repository
    """
    pass


@app.get('/repos/search', response_model=SearchResults, tags=['repository'])
def repo_search(
    q: Optional[str] = None,
    topic: Optional[bool] = None,
    include_desc: Optional[bool] = Query(None, alias='includeDesc'),
    uid: Optional[int] = None,
    priority_owner_id: Optional[int] = None,
    team_id: Optional[int] = None,
    starred_by: Optional[int] = Query(None, alias='starredBy'),
    private: Optional[bool] = None,
    is_private: Optional[bool] = None,
    template: Optional[bool] = None,
    archived: Optional[bool] = None,
    mode: Optional[str] = None,
    exclusive: Optional[bool] = None,
    sort: Optional[str] = None,
    order: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> SearchResults:
    """
    Search for repositories
    """
    pass


@app.get('/repos/{owner}/{repo}', response_model=Repository, tags=['repository'])
def repo_get(owner: str, repo: str = ...) -> Repository:
    """
    Get a repository
    """
    pass


@app.delete('/repos/{owner}/{repo}', response_model=None, tags=['repository'])
def repo_delete(owner: str, repo: str = ...) -> None:
    """
    Delete a repository
    """
    pass


@app.patch('/repos/{owner}/{repo}', response_model=Repository, tags=['repository'])
def repo_edit(owner: str, repo: str = ..., body: EditRepoOption = None) -> Repository:
    """
    Edit a repository's properties. Only fields that are set will be changed.
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/allspice_generated/json/{filepath}',
    response_model=None,
    tags=['repository'],
)
def repo_get_all_spice_j_s_o_n(
    owner: str, repo: str = ..., filepath: str = ..., ref: Optional[str] = None
) -> None:
    """
    Get the json blob for a cad file if it exists, otherwise enqueue a new job and return a 503 status. Note: This is still experimental and not yet recommended for critical applications.
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/allspice_generated/svg/{filepath}',
    response_model=None,
    tags=['repository'],
)
def repo_get_all_spice_s_v_g(
    owner: str, repo: str = ..., filepath: str = ..., ref: Optional[str] = None
) -> None:
    """
    Get the svg blob for a cad file if it exists, otherwise enqueue a new job and return 503 status. Note: This is still experimental and not yet recommended for critical applications.
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/archive/{archive}', response_model=None, tags=['repository']
)
def repo_get_archive(owner: str, repo: str = ..., archive: str = ...) -> None:
    """
    Get an archive of a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/assignees', response_model=List[User], tags=['repository']
)
def repo_get_assignees(owner: str, repo: str = ...) -> List[User]:
    """
    Return all users that have write access and can be assigned to issues
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/branch_protections',
    response_model=List[BranchProtection],
    tags=['repository'],
)
def repo_list_branch_protection(owner: str, repo: str = ...) -> List[BranchProtection]:
    """
    List branch protections for a repository
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/branch_protections',
    response_model=None,
    responses={'201': {'model': BranchProtection}},
    tags=['repository'],
)
def repo_create_branch_protection(
    owner: str, repo: str = ..., body: CreateBranchProtectionOption = None
) -> Union[None, BranchProtection]:
    """
    Create a branch protections for a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/branch_protections/{name}',
    response_model=BranchProtection,
    tags=['repository'],
)
def repo_get_branch_protection(
    owner: str, repo: str = ..., name: str = ...
) -> BranchProtection:
    """
    Get a specific branch protection for the repository
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/branch_protections/{name}',
    response_model=None,
    tags=['repository'],
)
def repo_delete_branch_protection(owner: str, repo: str = ..., name: str = ...) -> None:
    """
    Delete a specific branch protection for the repository
    """
    pass


@app.patch(
    '/repos/{owner}/{repo}/branch_protections/{name}',
    response_model=BranchProtection,
    tags=['repository'],
)
def repo_edit_branch_protection(
    owner: str,
    repo: str = ...,
    name: str = ...,
    body: EditBranchProtectionOption = None,
) -> BranchProtection:
    """
    Edit a branch protections for a repository. Only fields that are set will be changed
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/branches', response_model=List[Branch], tags=['repository']
)
def repo_list_branches(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> List[Branch]:
    """
    List a repository's branches
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/branches',
    response_model=None,
    responses={'201': {'model': Branch}},
    tags=['repository'],
)
def repo_create_branch(
    owner: str, repo: str = ..., body: CreateBranchRepoOption = None
) -> Union[None, Branch]:
    """
    Create a branch
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/branches/{branch}',
    response_model=Branch,
    tags=['repository'],
)
def repo_get_branch(owner: str, repo: str = ..., branch: str = ...) -> Branch:
    """
    Retrieve a specific branch from a repository, including its effective branch protection
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/branches/{branch}', response_model=None, tags=['repository']
)
def repo_delete_branch(owner: str, repo: str = ..., branch: str = ...) -> None:
    """
    Delete a specific branch from a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/collaborators',
    response_model=List[User],
    tags=['repository'],
)
def repo_list_collaborators(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List a repository's collaborators
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/collaborators/{collaborator}',
    response_model=None,
    tags=['repository'],
)
def repo_check_collaborator(
    owner: str, repo: str = ..., collaborator: str = ...
) -> None:
    """
    Check if a user is a collaborator of a repository
    """
    pass


@app.put(
    '/repos/{owner}/{repo}/collaborators/{collaborator}',
    response_model=None,
    tags=['repository'],
)
def repo_add_collaborator(
    owner: str,
    repo: str = ...,
    collaborator: str = ...,
    body: AddCollaboratorOption = None,
) -> None:
    """
    Add a collaborator to a repository
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/collaborators/{collaborator}',
    response_model=None,
    tags=['repository'],
)
def repo_delete_collaborator(
    owner: str, repo: str = ..., collaborator: str = ...
) -> None:
    """
    Delete a collaborator from a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/collaborators/{collaborator}/permission',
    response_model=RepoCollaboratorPermission,
    tags=['repository'],
)
def repo_get_repo_permissions(
    owner: str, repo: str = ..., collaborator: str = ...
) -> RepoCollaboratorPermission:
    """
    Get repository permissions for a user
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/commits',
    response_model=List[Commit],
    responses={'409': {'model': APIError}},
    tags=['repository'],
)
def repo_get_all_commits(
    owner: str,
    repo: str = ...,
    sha: Optional[str] = None,
    path: Optional[str] = None,
    stat: Optional[bool] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> Union[List[Commit], APIError]:
    """
    Get a list of all commits from a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/commits/{ref}/status',
    response_model=CombinedStatus,
    tags=['repository'],
)
def repo_get_combined_status_by_ref(
    owner: str,
    repo: str = ...,
    ref: str = ...,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> CombinedStatus:
    """
    Get a commit's combined status, by branch/tag/commit reference
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/commits/{ref}/statuses',
    response_model=List[CommitStatus],
    tags=['repository'],
)
def repo_list_statuses_by_ref(
    owner: str,
    repo: str = ...,
    ref: str = ...,
    sort: Optional[Sort] = None,
    state: Optional[State2] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[CommitStatus]:
    """
    Get a commit's statuses, by branch/tag/commit reference
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/contents',
    response_model=List[ContentsResponse],
    tags=['repository'],
)
def repo_get_contents_list(
    owner: str, repo: str = ..., ref: Optional[str] = None
) -> List[ContentsResponse]:
    """
    Gets the metadata of all the entries of the root dir
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/contents/{filepath}',
    response_model=ContentsResponse,
    tags=['repository'],
)
def repo_get_contents(
    owner: str, repo: str = ..., filepath: str = ..., ref: Optional[str] = None
) -> ContentsResponse:
    """
    Gets the metadata and contents (if a file) of an entry in a repository, or a list of entries if a dir
    """
    pass


@app.put(
    '/repos/{owner}/{repo}/contents/{filepath}',
    response_model=FileResponse,
    tags=['repository'],
)
def repo_update_file(
    owner: str, repo: str = ..., filepath: str = ..., body: UpdateFileOptions = ...
) -> FileResponse:
    """
    Update a file in a repository
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/contents/{filepath}',
    response_model=None,
    responses={'201': {'model': FileResponse}},
    tags=['repository'],
)
def repo_create_file(
    owner: str, repo: str = ..., filepath: str = ..., body: CreateFileOptions = ...
) -> Union[None, FileResponse]:
    """
    Create a file in a repository
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/contents/{filepath}',
    response_model=FileDeleteResponse,
    tags=['repository'],
)
def repo_delete_file(
    owner: str, repo: str = ..., filepath: str = ..., body: DeleteFileOptions = ...
) -> FileDeleteResponse:
    """
    Delete a file in a repository
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/diffpatch', response_model=FileResponse, tags=['repository']
)
def repo_apply_diff_patch(
    owner: str, repo: str = ..., body: UpdateFileOptions = ...
) -> FileResponse:
    """
    Apply diff patch to repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/editorconfig/{filepath}',
    response_model=None,
    tags=['repository'],
)
def repo_get_editor_config(
    owner: str, repo: str = ..., filepath: str = ..., ref: Optional[str] = None
) -> None:
    """
    Get the EditorConfig definitions of a file in a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/forks', response_model=List[Repository], tags=['repository']
)
def list_forks(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> List[Repository]:
    """
    List a repository's forks
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/forks',
    response_model=None,
    responses={'202': {'model': Repository}},
    tags=['repository'],
)
def create_fork(
    owner: str, repo: str = ..., body: CreateForkOption = None
) -> Union[None, Repository]:
    """
    Fork a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/git/blobs/{sha}',
    response_model=GitBlobResponse,
    tags=['repository'],
)
def get_blob(owner: str, repo: str = ..., sha: str = ...) -> GitBlobResponse:
    """
    Gets the blob of a repository.
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/git/commits/{sha}',
    response_model=Commit,
    tags=['repository'],
)
def repo_get_single_commit(owner: str, repo: str = ..., sha: str = ...) -> Commit:
    """
    Get a single commit from a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/git/commits/{sha}.{diff_type}',
    response_model=str,
    tags=['repository'],
)
def repo_download_commit_diff_or_patch(
    owner: str,
    repo: str = ...,
    sha: str = ...,
    diff_type: DiffType2 = Path(..., alias='diffType'),
) -> str:
    """
    Get a commit's diff or patch
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/git/notes/{sha}', response_model=Note, tags=['repository']
)
def repo_get_note(owner: str, repo: str = ..., sha: str = ...) -> Note:
    """
    Get a note corresponding to a single commit from a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/git/refs',
    response_model=List[Reference],
    tags=['repository'],
)
def repo_list_all_git_refs(owner: str, repo: str = ...) -> List[Reference]:
    """
    Get specified ref or filtered repository's refs
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/git/refs/{ref}',
    response_model=List[Reference],
    tags=['repository'],
)
def repo_list_git_refs(owner: str, repo: str = ..., ref: str = ...) -> List[Reference]:
    """
    Get specified ref or filtered repository's refs
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/git/tags/{sha}',
    response_model=AnnotatedTag,
    tags=['repository'],
)
def get_annotated_tag(owner: str, repo: str = ..., sha: str = ...) -> AnnotatedTag:
    """
    Gets the tag object of an annotated tag (not lightweight tags)
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/git/trees/{sha}',
    response_model=GitTreeResponse,
    tags=['repository'],
)
def get_tree(
    owner: str,
    repo: str = ...,
    sha: str = ...,
    recursive: Optional[bool] = None,
    page: Optional[int] = None,
    per_page: Optional[int] = None,
) -> GitTreeResponse:
    """
    Gets the tree of a repository.
    """
    pass


@app.get('/repos/{owner}/{repo}/hooks', response_model=List[Hook], tags=['repository'])
def repo_list_hooks(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> List[Hook]:
    """
    List the hooks in a repository
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/hooks',
    response_model=None,
    responses={'201': {'model': Hook}},
    tags=['repository'],
)
def repo_create_hook(
    owner: str, repo: str = ..., body: CreateHookOption = None
) -> Union[None, Hook]:
    """
    Create a hook
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/hooks/git', response_model=List[GitHook], tags=['repository']
)
def repo_list_git_hooks(owner: str, repo: str = ...) -> List[GitHook]:
    """
    List the Git hooks in a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/hooks/git/{id}', response_model=GitHook, tags=['repository']
)
def repo_get_git_hook(owner: str, repo: str = ..., id: str = ...) -> GitHook:
    """
    Get a Git hook
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/hooks/git/{id}', response_model=None, tags=['repository']
)
def repo_delete_git_hook(owner: str, repo: str = ..., id: str = ...) -> None:
    """
    Delete a Git hook in a repository
    """
    pass


@app.patch(
    '/repos/{owner}/{repo}/hooks/git/{id}', response_model=GitHook, tags=['repository']
)
def repo_edit_git_hook(
    owner: str, repo: str = ..., id: str = ..., body: EditGitHookOption = None
) -> GitHook:
    """
    Edit a Git hook in a repository
    """
    pass


@app.get('/repos/{owner}/{repo}/hooks/{id}', response_model=Hook, tags=['repository'])
def repo_get_hook(owner: str, repo: str = ..., id: int = ...) -> Hook:
    """
    Get a hook
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/hooks/{id}', response_model=None, tags=['repository']
)
def repo_delete_hook(owner: str, repo: str = ..., id: int = ...) -> None:
    """
    Delete a hook in a repository
    """
    pass


@app.patch('/repos/{owner}/{repo}/hooks/{id}', response_model=Hook, tags=['repository'])
def repo_edit_hook(
    owner: str, repo: str = ..., id: int = ..., body: EditHookOption = None
) -> Hook:
    """
    Edit a hook in a repository
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/hooks/{id}/tests', response_model=None, tags=['repository']
)
def repo_test_hook(
    owner: str, repo: str = ..., id: int = ..., ref: Optional[str] = None
) -> None:
    """
    Test a push webhook
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issue_templates',
    response_model=List[IssueTemplate],
    tags=['repository'],
)
def repo_get_issue_templates(owner: str, repo: str = ...) -> List[IssueTemplate]:
    """
    Get available issue templates for a repository
    """
    pass


@app.get('/repos/{owner}/{repo}/issues', response_model=List[Issue], tags=['issue'])
def issue_list_issues(
    owner: str,
    repo: str = ...,
    state: Optional[State3] = None,
    labels: Optional[str] = None,
    q: Optional[str] = None,
    type: Optional[Type4] = None,
    milestones: Optional[str] = None,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    created_by: Optional[str] = None,
    assigned_by: Optional[str] = None,
    mentioned_by: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[Issue]:
    """
    List a repository's issues
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/issues',
    response_model=None,
    responses={'201': {'model': Issue}},
    tags=['issue'],
)
def issue_create_issue(
    owner: str, repo: str = ..., body: CreateIssueOption = None
) -> Union[None, Issue]:
    """
    Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issues/comments',
    response_model=List[Comment],
    tags=['issue'],
)
def issue_get_repo_comments(
    owner: str,
    repo: str = ...,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[Comment]:
    """
    List all comments in a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issues/comments/{id}', response_model=Comment, tags=['issue']
)
def issue_get_comment(owner: str, repo: str = ..., id: int = ...) -> Comment:
    """
    Get a comment
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/issues/comments/{id}', response_model=None, tags=['issue']
)
def issue_delete_comment(owner: str, repo: str = ..., id: int = ...) -> None:
    """
    Delete a comment
    """
    pass


@app.patch(
    '/repos/{owner}/{repo}/issues/comments/{id}', response_model=Comment, tags=['issue']
)
def issue_edit_comment(
    owner: str, repo: str = ..., id: int = ..., body: EditIssueCommentOption = None
) -> Comment:
    """
    Edit a comment
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
    response_model=List[Reaction],
    tags=['issue'],
)
def issue_get_comment_reactions(
    owner: str, repo: str = ..., id: int = ...
) -> List[Reaction]:
    """
    Get a list of reactions from a comment of an issue
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
    response_model=Reaction,
    responses={'201': {'model': Reaction}},
    tags=['issue'],
)
def issue_post_comment_reaction(
    owner: str, repo: str = ..., id: int = ..., body: EditReactionOption = None
) -> Reaction:
    """
    Add a reaction to a comment of an issue
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/issues/comments/{id}/reactions',
    response_model=None,
    tags=['issue'],
)
def issue_delete_comment_reaction(
    owner: str, repo: str = ..., id: int = ..., body: EditReactionOption = None
) -> None:
    """
    Remove a reaction from a comment of an issue
    """
    pass


@app.get('/repos/{owner}/{repo}/issues/{index}', response_model=Issue, tags=['issue'])
def issue_get_issue(owner: str, repo: str = ..., index: int = ...) -> Issue:
    """
    Get an issue
    """
    pass


@app.delete('/repos/{owner}/{repo}/issues/{index}', response_model=None, tags=['issue'])
def issue_delete(owner: str, repo: str = ..., index: int = ...) -> None:
    """
    Delete an issue
    """
    pass


@app.patch(
    '/repos/{owner}/{repo}/issues/{index}',
    response_model=None,
    responses={'201': {'model': Issue}},
    tags=['issue'],
)
def issue_edit_issue(
    owner: str, repo: str = ..., index: int = ..., body: EditIssueOption = None
) -> Union[None, Issue]:
    """
    Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/comments',
    response_model=List[Comment],
    tags=['issue'],
)
def issue_get_comments(
    owner: str,
    repo: str = ...,
    index: int = ...,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
) -> List[Comment]:
    """
    List all comments on an issue
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/comments',
    response_model=None,
    responses={'201': {'model': Comment}},
    tags=['issue'],
)
def issue_create_comment(
    owner: str, repo: str = ..., index: int = ..., body: CreateIssueCommentOption = None
) -> Union[None, Comment]:
    """
    Add a comment to an issue
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/comments/{id}',
    response_model=None,
    tags=['issue'],
)
def issue_delete_comment_deprecated(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
) -> None:
    """
    Delete a comment
    """
    pass


@app.patch(
    '/repos/{owner}/{repo}/issues/{index}/comments/{id}',
    response_model=Comment,
    tags=['issue'],
)
def issue_edit_comment_deprecated(
    owner: str,
    repo: str = ...,
    index: int = ...,
    id: int = ...,
    body: EditIssueCommentOption = None,
) -> Comment:
    """
    Edit a comment
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/deadline',
    response_model=None,
    responses={'201': {'model': IssueDeadline}},
    tags=['issue'],
)
def issue_edit_issue_deadline(
    owner: str, repo: str = ..., index: int = ..., body: EditDeadlineOption = None
) -> Union[None, IssueDeadline]:
    """
    Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/labels',
    response_model=List[Label],
    tags=['issue'],
)
def issue_get_labels(owner: str, repo: str = ..., index: int = ...) -> List[Label]:
    """
    Get an issue's labels
    """
    pass


@app.put(
    '/repos/{owner}/{repo}/issues/{index}/labels',
    response_model=List[Label],
    tags=['issue'],
)
def issue_replace_labels(
    owner: str, repo: str = ..., index: int = ..., body: IssueLabelsOption = None
) -> List[Label]:
    """
    Replace an issue's labels
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/labels',
    response_model=List[Label],
    tags=['issue'],
)
def issue_add_label(
    owner: str, repo: str = ..., index: int = ..., body: IssueLabelsOption = None
) -> List[Label]:
    """
    Add a label to an issue
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/labels', response_model=None, tags=['issue']
)
def issue_clear_labels(owner: str, repo: str = ..., index: int = ...) -> None:
    """
    Remove all labels from an issue
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/labels/{id}',
    response_model=None,
    tags=['issue'],
)
def issue_remove_label(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
) -> None:
    """
    Remove a label from an issue
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/reactions',
    response_model=List[Reaction],
    tags=['issue'],
)
def issue_get_issue_reactions(
    owner: str,
    repo: str = ...,
    index: int = ...,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[Reaction]:
    """
    Get a list reactions of an issue
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/reactions',
    response_model=Reaction,
    responses={'201': {'model': Reaction}},
    tags=['issue'],
)
def issue_post_issue_reaction(
    owner: str, repo: str = ..., index: int = ..., body: EditReactionOption = None
) -> Reaction:
    """
    Add a reaction to an issue
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/reactions',
    response_model=None,
    tags=['issue'],
)
def issue_delete_issue_reaction(
    owner: str, repo: str = ..., index: int = ..., body: EditReactionOption = None
) -> None:
    """
    Remove a reaction from an issue
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/stopwatch/delete',
    response_model=None,
    tags=['issue'],
)
def issue_delete_stop_watch(owner: str, repo: str = ..., index: int = ...) -> None:
    """
    Delete an issue's existing stopwatch.
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/stopwatch/start',
    response_model=None,
    tags=['issue'],
)
def issue_start_stop_watch(owner: str, repo: str = ..., index: int = ...) -> None:
    """
    Start stopwatch on an issue.
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/stopwatch/stop',
    response_model=None,
    tags=['issue'],
)
def issue_stop_stop_watch(owner: str, repo: str = ..., index: int = ...) -> None:
    """
    Stop an issue's existing stopwatch.
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/subscriptions',
    response_model=List[User],
    tags=['issue'],
)
def issue_subscriptions(
    owner: str,
    repo: str = ...,
    index: int = ...,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[User]:
    """
    Get users who subscribed on an issue.
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/subscriptions/check',
    response_model=WatchInfo,
    tags=['issue'],
)
def issue_check_subscription(
    owner: str, repo: str = ..., index: int = ...
) -> WatchInfo:
    """
    Check if user is subscribed to an issue
    """
    pass


@app.put(
    '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}',
    response_model=None,
    tags=['issue'],
)
def issue_add_subscription(
    owner: str, repo: str = ..., index: int = ..., user: str = ...
) -> None:
    """
    Subscribe user to issue
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/subscriptions/{user}',
    response_model=None,
    tags=['issue'],
)
def issue_delete_subscription(
    owner: str, repo: str = ..., index: int = ..., user: str = ...
) -> None:
    """
    Unsubscribe user from issue
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/timeline',
    response_model=List[TimelineComment],
    tags=['issue'],
)
def issue_get_comments_and_timeline(
    owner: str,
    repo: str = ...,
    index: int = ...,
    since: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
    before: Optional[datetime] = None,
) -> List[TimelineComment]:
    """
    List all comments and events on an issue
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/issues/{index}/times',
    response_model=List[TrackedTime],
    tags=['issue'],
)
def issue_tracked_times(
    owner: str,
    repo: str = ...,
    index: int = ...,
    user: Optional[str] = None,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[TrackedTime]:
    """
    List an issue's tracked times
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/issues/{index}/times',
    response_model=TrackedTime,
    tags=['issue'],
)
def issue_add_time(
    owner: str, repo: str = ..., index: int = ..., body: AddTimeOption = None
) -> TrackedTime:
    """
    Add tracked time to a issue
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/times', response_model=None, tags=['issue']
)
def issue_reset_time(owner: str, repo: str = ..., index: int = ...) -> None:
    """
    Reset a tracked time of an issue
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/issues/{index}/times/{id}',
    response_model=None,
    tags=['issue'],
)
def issue_delete_time(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
) -> None:
    """
    Delete specific tracked time
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/keys', response_model=List[DeployKey], tags=['repository']
)
def repo_list_keys(
    owner: str,
    repo: str = ...,
    key_id: Optional[int] = None,
    fingerprint: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[DeployKey]:
    """
    List a repository's keys
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/keys',
    response_model=None,
    responses={'201': {'model': DeployKey}},
    tags=['repository'],
)
def repo_create_key(
    owner: str, repo: str = ..., body: CreateKeyOption = None
) -> Union[None, DeployKey]:
    """
    Add a key to a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/keys/{id}', response_model=DeployKey, tags=['repository']
)
def repo_get_key(owner: str, repo: str = ..., id: int = ...) -> DeployKey:
    """
    Get a repository's key by id
    """
    pass


@app.delete('/repos/{owner}/{repo}/keys/{id}', response_model=None, tags=['repository'])
def repo_delete_key(owner: str, repo: str = ..., id: int = ...) -> None:
    """
    Delete a key from a repository
    """
    pass


@app.get('/repos/{owner}/{repo}/labels', response_model=List[Label], tags=['issue'])
def issue_list_labels(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> List[Label]:
    """
    Get all of a repository's labels
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/labels',
    response_model=None,
    responses={'201': {'model': Label}},
    tags=['issue'],
)
def issue_create_label(
    owner: str, repo: str = ..., body: CreateLabelOption = None
) -> Union[None, Label]:
    """
    Create a label
    """
    pass


@app.get('/repos/{owner}/{repo}/labels/{id}', response_model=Label, tags=['issue'])
def issue_get_label(owner: str, repo: str = ..., id: int = ...) -> Label:
    """
    Get a single label
    """
    pass


@app.delete('/repos/{owner}/{repo}/labels/{id}', response_model=None, tags=['issue'])
def issue_delete_label(owner: str, repo: str = ..., id: int = ...) -> None:
    """
    Delete a label
    """
    pass


@app.patch('/repos/{owner}/{repo}/labels/{id}', response_model=Label, tags=['issue'])
def issue_edit_label(
    owner: str, repo: str = ..., id: int = ..., body: EditLabelOption = None
) -> Label:
    """
    Update a label
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/languages',
    response_model=ReposOwnerRepoLanguagesGetResponse,
    tags=['repository'],
)
def repo_get_languages(
    owner: str, repo: str = ...
) -> ReposOwnerRepoLanguagesGetResponse:
    """
    Get languages and number of bytes of code written
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/media/{filepath}', response_model=None, tags=['repository']
)
def repo_get_raw_file_or_l_f_s(
    owner: str, repo: str = ..., filepath: str = ..., ref: Optional[str] = None
) -> None:
    """
    Get a file or it's LFS object from a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/milestones', response_model=List[Milestone], tags=['issue']
)
def issue_get_milestones_list(
    owner: str,
    repo: str = ...,
    state: Optional[str] = None,
    name: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[Milestone]:
    """
    Get all of a repository's opened milestones
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/milestones',
    response_model=None,
    responses={'201': {'model': Milestone}},
    tags=['issue'],
)
def issue_create_milestone(
    owner: str, repo: str = ..., body: CreateMilestoneOption = None
) -> Union[None, Milestone]:
    """
    Create a milestone
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/milestones/{id}', response_model=Milestone, tags=['issue']
)
def issue_get_milestone(owner: str, repo: str = ..., id: str = ...) -> Milestone:
    """
    Get a milestone
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/milestones/{id}', response_model=None, tags=['issue']
)
def issue_delete_milestone(owner: str, repo: str = ..., id: str = ...) -> None:
    """
    Delete a milestone
    """
    pass


@app.patch(
    '/repos/{owner}/{repo}/milestones/{id}', response_model=Milestone, tags=['issue']
)
def issue_edit_milestone(
    owner: str, repo: str = ..., id: str = ..., body: EditMilestoneOption = None
) -> Milestone:
    """
    Update a milestone
    """
    pass


@app.post('/repos/{owner}/{repo}/mirror-sync', response_model=None, tags=['repository'])
def repo_mirror_sync(owner: str, repo: str = ...) -> None:
    """
    Sync a mirrored repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/notifications',
    response_model=List[NotificationThread],
    tags=['notification'],
)
def notify_get_repo_list(
    owner: str,
    repo: str = ...,
    all: Optional[bool] = None,
    status_types: Optional[List[str]] = Query(None, alias='status-types'),
    subject_type: Optional[List[SubjectType3]] = Query(None, alias='subject-type'),
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[NotificationThread]:
    """
    List users's notification threads on a specific repo
    """
    pass


@app.put(
    '/repos/{owner}/{repo}/notifications',
    response_model=None,
    responses={'205': {'model': List[NotificationThread]}},
    tags=['notification'],
)
def notify_read_repo_list(
    owner: str,
    repo: str = ...,
    all: Optional[str] = None,
    status_types: Optional[List[str]] = Query(None, alias='status-types'),
    to_status: Optional[str] = Query(None, alias='to-status'),
    last_read_at: Optional[datetime] = None,
) -> Union[None, List[NotificationThread]]:
    """
    Mark notification threads as read, pinned or unread on a specific repo
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/pulls', response_model=List[PullRequest], tags=['repository']
)
def repo_list_pull_requests(
    owner: str,
    repo: str = ...,
    state: Optional[State4] = None,
    sort: Optional[Sort2] = None,
    milestone: Optional[int] = None,
    labels: Optional[List[int]] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[PullRequest]:
    """
    List a repo's pull requests
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/pulls',
    response_model=None,
    responses={'201': {'model': PullRequest}},
    tags=['repository'],
)
def repo_create_pull_request(
    owner: str, repo: str = ..., body: CreatePullRequestOption = None
) -> Union[None, PullRequest]:
    """
    Create a pull request
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}',
    response_model=PullRequest,
    tags=['repository'],
)
def repo_get_pull_request(owner: str, repo: str = ..., index: int = ...) -> PullRequest:
    """
    Get a pull request
    """
    pass


@app.patch(
    '/repos/{owner}/{repo}/pulls/{index}',
    response_model=None,
    responses={'201': {'model': PullRequest}},
    tags=['repository'],
)
def repo_edit_pull_request(
    owner: str, repo: str = ..., index: int = ..., body: EditPullRequestOption = None
) -> Union[None, PullRequest]:
    """
    Update a pull request. If using deadline only the date will be taken into account, and time of day ignored.
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}.{diff_type}',
    response_model=str,
    tags=['repository'],
)
def repo_download_pull_diff_or_patch(
    owner: str,
    repo: str = ...,
    index: int = ...,
    diff_type: DiffType5 = Path(..., alias='diffType'),
    binary: Optional[bool] = None,
) -> str:
    """
    Get a pull request diff or patch
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/commits',
    response_model=List[Commit],
    tags=['repository'],
)
def repo_get_pull_request_commits(
    owner: str,
    repo: str = ...,
    index: int = ...,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[Commit]:
    """
    Get commits for a pull request
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/files',
    response_model=List[ChangedFile],
    tags=['repository'],
)
def repo_get_pull_request_files(
    owner: str,
    repo: str = ...,
    index: int = ...,
    skip_to: Optional[str] = Query(None, alias='skip-to'),
    whitespace: Optional[Whitespace1] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[ChangedFile]:
    """
    Get changed files for a pull request
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/merge',
    response_model=None,
    tags=['repository'],
)
def repo_pull_request_is_merged(owner: str, repo: str = ..., index: int = ...) -> None:
    """
    Check if a pull request has been merged
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/merge',
    response_model=None,
    tags=['repository'],
)
def repo_merge_pull_request(
    owner: str, repo: str = ..., index: int = ..., body: MergePullRequestOption = None
) -> None:
    """
    Merge a pull request
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/pulls/{index}/merge',
    response_model=None,
    tags=['repository'],
)
def repo_cancel_scheduled_auto_merge(
    owner: str, repo: str = ..., index: int = ...
) -> None:
    """
    Cancel the scheduled auto merge for the given pull request
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/requested_reviewers',
    response_model=None,
    responses={'201': {'model': List[PullReview]}},
    tags=['repository'],
)
def repo_create_pull_review_requests(
    owner: str, repo: str = ..., index: int = ..., body: PullReviewRequestOptions = ...
) -> Union[None, List[PullReview]]:
    """
    create review requests for a pull request
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/pulls/{index}/requested_reviewers',
    response_model=None,
    tags=['repository'],
)
def repo_delete_pull_review_requests(
    owner: str, repo: str = ..., index: int = ..., body: PullReviewRequestOptions = ...
) -> None:
    """
    cancel review requests for a pull request
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/reviews',
    response_model=List[PullReview],
    tags=['repository'],
)
def repo_list_pull_reviews(
    owner: str,
    repo: str = ...,
    index: int = ...,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[PullReview]:
    """
    List all reviews for a pull request
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/reviews',
    response_model=PullReview,
    tags=['repository'],
)
def repo_create_pull_review(
    owner: str, repo: str = ..., index: int = ..., body: CreatePullReviewOptions = ...
) -> PullReview:
    """
    Create a review to an pull request
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
    response_model=PullReview,
    tags=['repository'],
)
def repo_get_pull_review(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
) -> PullReview:
    """
    Get a specific review for a pull request
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
    response_model=PullReview,
    tags=['repository'],
)
def repo_submit_pull_review(
    owner: str,
    repo: str = ...,
    index: int = ...,
    id: int = ...,
    body: SubmitPullReviewOptions = ...,
) -> PullReview:
    """
    Submit a pending review to an pull request
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}',
    response_model=None,
    tags=['repository'],
)
def repo_delete_pull_review(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
) -> None:
    """
    Delete a specific review from a pull request
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/comments',
    response_model=List[PullReviewComment],
    tags=['repository'],
)
def repo_get_pull_review_comments(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
) -> List[PullReviewComment]:
    """
    Get a specific review for a pull request
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/dismissals',
    response_model=PullReview,
    tags=['repository'],
)
def repo_dismiss_pull_review(
    owner: str,
    repo: str = ...,
    index: int = ...,
    id: int = ...,
    body: DismissPullReviewOptions = ...,
) -> PullReview:
    """
    Dismiss a review for a pull request
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/reviews/{id}/undismissals',
    response_model=PullReview,
    tags=['repository'],
)
def repo_un_dismiss_pull_review(
    owner: str, repo: str = ..., index: int = ..., id: int = ...
) -> PullReview:
    """
    Cancel to dismiss a review for a pull request
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/pulls/{index}/update',
    response_model=None,
    tags=['repository'],
)
def repo_update_pull_request(
    owner: str, repo: str = ..., index: int = ..., style: Optional[Style1] = None
) -> None:
    """
    Merge PR's baseBranch into headBranch
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/push_mirrors',
    response_model=List[PushMirror],
    tags=['repository'],
)
def repo_list_push_mirrors(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> List[PushMirror]:
    """
    Get all push mirrors of the repository
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/push_mirrors',
    response_model=None,
    responses={'201': {'model': PushMirror}},
    tags=['repository'],
)
def repo_add_push_mirror(
    owner: str, repo: str = ..., body: CreatePushMirrorOption = None
) -> Union[None, PushMirror]:
    """
    add a push mirror to the repository
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/push_mirrors-sync', response_model=None, tags=['repository']
)
def repo_push_mirror_sync(owner: str, repo: str = ...) -> None:
    """
    Sync all push mirrored repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/push_mirrors/{name}',
    response_model=PushMirror,
    tags=['repository'],
)
def repo_get_push_mirror_by_remote_name(
    owner: str, repo: str = ..., name: str = ...
) -> PushMirror:
    """
    Get push mirror of the repository by remoteName
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/push_mirrors/{name}',
    response_model=None,
    tags=['repository'],
)
def repo_delete_push_mirror(owner: str, repo: str = ..., name: str = ...) -> None:
    """
    deletes a push mirror from a repository by remoteName
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/raw/{filepath}', response_model=None, tags=['repository']
)
def repo_get_raw_file(
    owner: str, repo: str = ..., filepath: str = ..., ref: Optional[str] = None
) -> None:
    """
    Get a file from a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/releases', response_model=List[Release], tags=['repository']
)
def repo_list_releases(
    owner: str,
    repo: str = ...,
    draft: Optional[bool] = None,
    pre_release: Optional[bool] = Query(None, alias='pre-release'),
    per_page: Optional[int] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[Release]:
    """
    List a repo's releases
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/releases',
    response_model=None,
    responses={'201': {'model': Release}},
    tags=['repository'],
)
def repo_create_release(
    owner: str, repo: str = ..., body: CreateReleaseOption = None
) -> Union[None, Release]:
    """
    Create a release
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/releases/tags/{tag}',
    response_model=Release,
    tags=['repository'],
)
def repo_get_release_by_tag(owner: str, repo: str = ..., tag: str = ...) -> Release:
    """
    Get a release by tag name
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/releases/tags/{tag}',
    response_model=None,
    tags=['repository'],
)
def repo_delete_release_by_tag(owner: str, repo: str = ..., tag: str = ...) -> None:
    """
    Delete a release by tag name
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/releases/{id}', response_model=Release, tags=['repository']
)
def repo_get_release(owner: str, repo: str = ..., id: int = ...) -> Release:
    """
    Get a release
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/releases/{id}', response_model=None, tags=['repository']
)
def repo_delete_release(owner: str, repo: str = ..., id: int = ...) -> None:
    """
    Delete a release
    """
    pass


@app.patch(
    '/repos/{owner}/{repo}/releases/{id}', response_model=Release, tags=['repository']
)
def repo_edit_release(
    owner: str, repo: str = ..., id: int = ..., body: EditReleaseOption = None
) -> Release:
    """
    Update a release
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/releases/{id}/assets',
    response_model=List[Attachment],
    tags=['repository'],
)
def repo_list_release_attachments(
    owner: str, repo: str = ..., id: int = ...
) -> List[Attachment]:
    """
    List release's attachments
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/releases/{id}/assets',
    response_model=None,
    responses={'201': {'model': Attachment}},
    tags=['repository'],
)
def repo_create_release_attachment(
    owner: str, repo: str = ..., id: int = ..., name: Optional[str] = None
) -> Union[None, Attachment]:
    """
    Create a release attachment
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
    response_model=Attachment,
    tags=['repository'],
)
def repo_get_release_attachment(
    owner: str, repo: str = ..., id: int = ..., attachment_id: int = ...
) -> Attachment:
    """
    Get a release attachment
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
    response_model=None,
    tags=['repository'],
)
def repo_delete_release_attachment(
    owner: str, repo: str = ..., id: int = ..., attachment_id: int = ...
) -> None:
    """
    Delete a release attachment
    """
    pass


@app.patch(
    '/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}',
    response_model=None,
    responses={'201': {'model': Attachment}},
    tags=['repository'],
)
def repo_edit_release_attachment(
    owner: str,
    repo: str = ...,
    id: int = ...,
    attachment_id: int = ...,
    body: EditAttachmentOptions = None,
) -> Union[None, Attachment]:
    """
    Edit a release attachment
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/reviewers', response_model=List[User], tags=['repository']
)
def repo_get_reviewers(owner: str, repo: str = ...) -> List[User]:
    """
    Return all users that can be requested to review in this repo
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/signing-key.gpg', response_model=str, tags=['repository']
)
def repo_signing_key(owner: str, repo: str = ...) -> str:
    """
    Get signing-key.gpg for given repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/stargazers', response_model=List[User], tags=['repository']
)
def repo_list_stargazers(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List a repo's stargazers
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/statuses/{sha}',
    response_model=List[CommitStatus],
    tags=['repository'],
)
def repo_list_statuses(
    owner: str,
    repo: str = ...,
    sha: str = ...,
    sort: Optional[Sort3] = None,
    state: Optional[State6] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[CommitStatus]:
    """
    Get a commit's statuses
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/statuses/{sha}',
    response_model=None,
    responses={'201': {'model': CommitStatus}},
    tags=['repository'],
)
def repo_create_status(
    owner: str, repo: str = ..., sha: str = ..., body: CreateStatusOption = None
) -> Union[None, CommitStatus]:
    """
    Create a commit status
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/subscribers', response_model=List[User], tags=['repository']
)
def repo_list_subscribers(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List a repo's watchers
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/subscription', response_model=WatchInfo, tags=['repository']
)
def user_current_check_subscription(owner: str, repo: str = ...) -> WatchInfo:
    """
    Check if the current user is watching a repo
    """
    pass


@app.put(
    '/repos/{owner}/{repo}/subscription', response_model=WatchInfo, tags=['repository']
)
def user_current_put_subscription(owner: str, repo: str = ...) -> WatchInfo:
    """
    Watch a repo
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/subscription', response_model=None, tags=['repository']
)
def user_current_delete_subscription(owner: str, repo: str = ...) -> None:
    """
    Unwatch a repo
    """
    pass


@app.get('/repos/{owner}/{repo}/tags', response_model=List[Tag], tags=['repository'])
def repo_list_tags(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> List[Tag]:
    """
    List a repository's tags
    """
    pass


@app.post('/repos/{owner}/{repo}/tags', response_model=Tag, tags=['repository'])
def repo_create_tag(owner: str, repo: str = ..., body: CreateTagOption = None) -> Tag:
    """
    Create a new git tag in a repository
    """
    pass


@app.get('/repos/{owner}/{repo}/tags/{tag}', response_model=Tag, tags=['repository'])
def repo_get_tag(owner: str, repo: str = ..., tag: str = ...) -> Tag:
    """
    Get the tag of a repository by tag name
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/tags/{tag}', response_model=None, tags=['repository']
)
def repo_delete_tag(owner: str, repo: str = ..., tag: str = ...) -> None:
    """
    Delete a repository's tag by name
    """
    pass


@app.get('/repos/{owner}/{repo}/teams', response_model=List[Team], tags=['repository'])
def repo_list_teams(owner: str, repo: str = ...) -> List[Team]:
    """
    List a repository's teams
    """
    pass


@app.get('/repos/{owner}/{repo}/teams/{team}', response_model=Team, tags=['repository'])
def repo_check_team(owner: str, repo: str = ..., team: str = ...) -> Team:
    """
    Check if a team is assigned to a repository
    """
    pass


@app.put('/repos/{owner}/{repo}/teams/{team}', response_model=None, tags=['repository'])
def repo_add_team(owner: str, repo: str = ..., team: str = ...) -> None:
    """
    Add a team to a repository
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/teams/{team}', response_model=None, tags=['repository']
)
def repo_delete_team(owner: str, repo: str = ..., team: str = ...) -> None:
    """
    Delete a team from a repository
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/times', response_model=List[TrackedTime], tags=['repository']
)
def repo_tracked_times(
    owner: str,
    repo: str = ...,
    user: Optional[str] = None,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[TrackedTime]:
    """
    List a repo's tracked times
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/times/{user}',
    response_model=List[TrackedTime],
    tags=['repository'],
)
def user_tracked_times(
    owner: str, repo: str = ..., user: str = ...
) -> List[TrackedTime]:
    """
    List a user's tracked times in a repo
    """
    pass


@app.get('/repos/{owner}/{repo}/topics', response_model=TopicName, tags=['repository'])
def repo_list_topics(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> TopicName:
    """
    Get list of topics that a repository has
    """
    pass


@app.put('/repos/{owner}/{repo}/topics', response_model=None, tags=['repository'])
def repo_update_topics(
    owner: str, repo: str = ..., body: RepoTopicOptions = None
) -> None:
    """
    Replace list of topics for a repository
    """
    pass


@app.put(
    '/repos/{owner}/{repo}/topics/{topic}', response_model=None, tags=['repository']
)
def repo_add_topic(owner: str, repo: str = ..., topic: str = ...) -> None:
    """
    Add a topic to a repository
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/topics/{topic}', response_model=None, tags=['repository']
)
def repo_delete_topic(owner: str, repo: str = ..., topic: str = ...) -> None:
    """
    Delete a topic from a repository
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/transfer',
    response_model=None,
    responses={'202': {'model': Repository}},
    tags=['repository'],
)
def repo_transfer(
    owner: str, repo: str = ..., body: TransferRepoOption = ...
) -> Union[None, Repository]:
    """
    Transfer a repo ownership
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/transfer/accept',
    response_model=None,
    responses={'202': {'model': Repository}},
    tags=['repository'],
)
def accept_repo_transfer(owner: str, repo: str = ...) -> Union[None, Repository]:
    """
    Accept a repo transfer
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/transfer/reject',
    response_model=Repository,
    tags=['repository'],
)
def reject_repo_transfer(owner: str, repo: str = ...) -> Repository:
    """
    Reject a repo transfer
    """
    pass


@app.post(
    '/repos/{owner}/{repo}/wiki/new',
    response_model=None,
    responses={'201': {'model': WikiPage}},
    tags=['repository'],
)
def repo_create_wiki_page(
    owner: str, repo: str = ..., body: CreateWikiPageOptions = None
) -> Union[None, WikiPage]:
    """
    Create a wiki page
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/wiki/page/{page_name}',
    response_model=WikiPage,
    tags=['repository'],
)
def repo_get_wiki_page(
    owner: str, repo: str = ..., page_name: str = Path(..., alias='pageName')
) -> WikiPage:
    """
    Get a wiki page
    """
    pass


@app.delete(
    '/repos/{owner}/{repo}/wiki/page/{page_name}',
    response_model=None,
    tags=['repository'],
)
def repo_delete_wiki_page(
    owner: str, repo: str = ..., page_name: str = Path(..., alias='pageName')
) -> None:
    """
    Delete a wiki page
    """
    pass


@app.patch(
    '/repos/{owner}/{repo}/wiki/page/{page_name}',
    response_model=WikiPage,
    tags=['repository'],
)
def repo_edit_wiki_page(
    owner: str,
    repo: str = ...,
    page_name: str = Path(..., alias='pageName'),
    body: CreateWikiPageOptions = None,
) -> WikiPage:
    """
    Edit a wiki page
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/wiki/pages',
    response_model=List[WikiPageMetaData],
    tags=['repository'],
)
def repo_get_wiki_pages(
    owner: str, repo: str = ..., page: Optional[int] = None, limit: Optional[int] = None
) -> List[WikiPageMetaData]:
    """
    Get all wiki pages
    """
    pass


@app.get(
    '/repos/{owner}/{repo}/wiki/revisions/{page_name}',
    response_model=WikiCommitList,
    tags=['repository'],
)
def repo_get_wiki_page_revisions(
    owner: str,
    repo: str = ...,
    page_name: str = Path(..., alias='pageName'),
    page: Optional[int] = None,
) -> WikiCommitList:
    """
    Get revisions of a wiki page
    """
    pass


@app.post(
    '/repos/{template_owner}/{template_repo}/generate',
    response_model=None,
    responses={'201': {'model': Repository}},
    tags=['repository'],
)
def generate_repo(
    template_owner: str, template_repo: str = ..., body: GenerateRepoOption = None
) -> Union[None, Repository]:
    """
    Create a repository using a template
    """
    pass


@app.get('/repositories/{id}', response_model=Repository, tags=['repository'])
def repo_get_by_i_d(id: int) -> Repository:
    """
    Get a repository by id
    """
    pass


@app.get('/settings/api', response_model=GeneralAPISettings, tags=['settings'])
def get_general_a_p_i_settings() -> GeneralAPISettings:
    """
    Get instance's global settings for api
    """
    pass


@app.get(
    '/settings/attachment', response_model=GeneralAttachmentSettings, tags=['settings']
)
def get_general_attachment_settings() -> GeneralAttachmentSettings:
    """
    Get instance's global settings for Attachment
    """
    pass


@app.get('/settings/repository', response_model=GeneralRepoSettings, tags=['settings'])
def get_general_repository_settings() -> GeneralRepoSettings:
    """
    Get instance's global settings for repositories
    """
    pass


@app.get('/settings/ui', response_model=GeneralUISettings, tags=['settings'])
def get_general_u_i_settings() -> GeneralUISettings:
    """
    Get instance's global settings for ui
    """
    pass


@app.get('/signing-key.gpg', response_model=str, tags=['miscellaneous'])
def get_signing_key() -> str:
    """
    Get default signing-key.gpg
    """
    pass


@app.get('/teams/{id}', response_model=Team, tags=['organization'])
def org_get_team(id: int) -> Team:
    """
    Get a team
    """
    pass


@app.delete('/teams/{id}', response_model=None, tags=['organization'])
def org_delete_team(id: int) -> None:
    """
    Delete a team
    """
    pass


@app.patch('/teams/{id}', response_model=Team, tags=['organization'])
def org_edit_team(id: int, body: EditTeamOption = None) -> Team:
    """
    Edit a team
    """
    pass


@app.get('/teams/{id}/members', response_model=List[User], tags=['organization'])
def org_list_team_members(
    id: int, page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List a team's members
    """
    pass


@app.get('/teams/{id}/members/{username}', response_model=User, tags=['organization'])
def org_list_team_member(id: int, username: str = ...) -> User:
    """
    List a particular member of team
    """
    pass


@app.put('/teams/{id}/members/{username}', response_model=None, tags=['organization'])
def org_add_team_member(id: int, username: str = ...) -> None:
    """
    Add a team member
    """
    pass


@app.delete(
    '/teams/{id}/members/{username}', response_model=None, tags=['organization']
)
def org_remove_team_member(id: int, username: str = ...) -> None:
    """
    Remove a team member
    """
    pass


@app.get('/teams/{id}/repos', response_model=List[Repository], tags=['organization'])
def org_list_team_repos(
    id: int, page: Optional[int] = None, limit: Optional[int] = None
) -> List[Repository]:
    """
    List a team's repos
    """
    pass


@app.get(
    '/teams/{id}/repos/{org}/{repo}', response_model=Repository, tags=['organization']
)
def org_list_team_repo(id: int, org: str = ..., repo: str = ...) -> Repository:
    """
    List a particular repo of team
    """
    pass


@app.put('/teams/{id}/repos/{org}/{repo}', response_model=None, tags=['organization'])
def org_add_team_repository(id: int, org: str = ..., repo: str = ...) -> None:
    """
    Add a repository to a team
    """
    pass


@app.delete(
    '/teams/{id}/repos/{org}/{repo}', response_model=None, tags=['organization']
)
def org_remove_team_repository(id: int, org: str = ..., repo: str = ...) -> None:
    """
    Remove a repository from a team
    """
    pass


@app.get('/topics/search', response_model=List[TopicResponse], tags=['repository'])
def topic_search(
    q: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[TopicResponse]:
    """
    search topics via keyword
    """
    pass


@app.get('/user', response_model=User, tags=['user'])
def user_get_current() -> User:
    """
    Get the authenticated user
    """
    pass


@app.get(
    '/user/applications/oauth2', response_model=List[OAuth2Application], tags=['user']
)
def user_get_oauth2_application(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[OAuth2Application]:
    """
    List the authenticated user's oauth2 applications
    """
    pass


@app.post(
    '/user/applications/oauth2',
    response_model=None,
    responses={'201': {'model': OAuth2Application}},
    tags=['user'],
)
def user_create_o_auth2_application(
    body: CreateOAuth2ApplicationOptions,
) -> Union[None, OAuth2Application]:
    """
    creates a new OAuth2 application
    """
    pass


@app.get(
    '/user/applications/oauth2/{id}', response_model=OAuth2Application, tags=['user']
)
def user_get_o_auth2_application(id: int) -> OAuth2Application:
    """
    get an OAuth2 Application
    """
    pass


@app.delete('/user/applications/oauth2/{id}', response_model=None, tags=['user'])
def user_delete_o_auth2_application(id: int) -> None:
    """
    delete an OAuth2 Application
    """
    pass


@app.patch(
    '/user/applications/oauth2/{id}', response_model=OAuth2Application, tags=['user']
)
def user_update_o_auth2_application(
    id: int, body: CreateOAuth2ApplicationOptions = ...
) -> OAuth2Application:
    """
    update an OAuth2 Application, this includes regenerating the client secret
    """
    pass


@app.get('/user/emails', response_model=List[Email], tags=['user'])
def user_list_emails() -> List[Email]:
    """
    List the authenticated user's email addresses
    """
    pass


@app.post(
    '/user/emails',
    response_model=None,
    responses={'201': {'model': List[Email]}},
    tags=['user'],
)
def user_add_email(body: CreateEmailOption = None) -> Union[None, List[Email]]:
    """
    Add email addresses
    """
    pass


@app.delete('/user/emails', response_model=None, tags=['user'])
def user_delete_email(body: DeleteEmailOption = None) -> None:
    """
    Delete email addresses
    """
    pass


@app.get('/user/followers', response_model=List[User], tags=['user'])
def user_current_list_followers(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List the authenticated user's followers
    """
    pass


@app.get('/user/following', response_model=List[User], tags=['user'])
def user_current_list_following(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List the users that the authenticated user is following
    """
    pass


@app.get('/user/following/{username}', response_model=None, tags=['user'])
def user_current_check_following(username: str) -> None:
    """
    Check whether a user is followed by the authenticated user
    """
    pass


@app.put('/user/following/{username}', response_model=None, tags=['user'])
def user_current_put_follow(username: str) -> None:
    """
    Follow a user
    """
    pass


@app.delete('/user/following/{username}', response_model=None, tags=['user'])
def user_current_delete_follow(username: str) -> None:
    """
    Unfollow a user
    """
    pass


@app.get('/user/gpg_key_token', response_model=str, tags=['user'])
def get_verification_token() -> str:
    """
    Get a Token to verify
    """
    pass


@app.post(
    '/user/gpg_key_verify',
    response_model=None,
    responses={'201': {'model': GPGKey}},
    tags=['user'],
)
def user_verify_g_p_g_key() -> Union[None, GPGKey]:
    """
    Verify a GPG key
    """
    pass


@app.get('/user/gpg_keys', response_model=List[GPGKey], tags=['user'])
def user_current_list_g_p_g_keys(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[GPGKey]:
    """
    List the authenticated user's GPG keys
    """
    pass


@app.post(
    '/user/gpg_keys',
    response_model=None,
    responses={'201': {'model': GPGKey}},
    tags=['user'],
)
def user_current_post_g_p_g_key(body: CreateGPGKeyOption = None) -> Union[None, GPGKey]:
    """
    Create a GPG key
    """
    pass


@app.get('/user/gpg_keys/{id}', response_model=GPGKey, tags=['user'])
def user_current_get_g_p_g_key(id: int) -> GPGKey:
    """
    Get a GPG key
    """
    pass


@app.delete('/user/gpg_keys/{id}', response_model=None, tags=['user'])
def user_current_delete_g_p_g_key(id: int) -> None:
    """
    Remove a GPG key
    """
    pass


@app.get('/user/keys', response_model=List[PublicKey], tags=['user'])
def user_current_list_keys(
    fingerprint: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[PublicKey]:
    """
    List the authenticated user's public keys
    """
    pass


@app.post(
    '/user/keys',
    response_model=None,
    responses={'201': {'model': PublicKey}},
    tags=['user'],
)
def user_current_post_key(body: CreateKeyOption = None) -> Union[None, PublicKey]:
    """
    Create a public key
    """
    pass


@app.get('/user/keys/{id}', response_model=PublicKey, tags=['user'])
def user_current_get_key(id: int) -> PublicKey:
    """
    Get a public key
    """
    pass


@app.delete('/user/keys/{id}', response_model=None, tags=['user'])
def user_current_delete_key(id: int) -> None:
    """
    Delete a public key
    """
    pass


@app.get('/user/orgs', response_model=List[Organization], tags=['organization'])
def org_list_current_user_orgs(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[Organization]:
    """
    List the current user's organizations
    """
    pass


@app.get('/user/repos', response_model=List[Repository], tags=['user'])
def user_current_list_repos(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[Repository]:
    """
    List the repos that the authenticated user owns
    """
    pass


@app.post(
    '/user/repos',
    response_model=None,
    responses={'201': {'model': Repository}},
    tags=['repository', 'user'],
)
def create_current_user_repo(body: CreateRepoOption = None) -> Union[None, Repository]:
    """
    Create a repository
    """
    pass


@app.get('/user/settings', response_model=List[UserSettings], tags=['user'])
def get_user_settings() -> List[UserSettings]:
    """
    Get user settings
    """
    pass


@app.patch('/user/settings', response_model=List[UserSettings], tags=['user'])
def update_user_settings(body: UserSettingsOptions = None) -> List[UserSettings]:
    """
    Update user settings
    """
    pass


@app.get('/user/starred', response_model=List[Repository], tags=['user'])
def user_current_list_starred(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[Repository]:
    """
    The repos that the authenticated user has starred
    """
    pass


@app.get('/user/starred/{owner}/{repo}', response_model=None, tags=['user'])
def user_current_check_starring(owner: str, repo: str = ...) -> None:
    """
    Whether the authenticated is starring the repo
    """
    pass


@app.put('/user/starred/{owner}/{repo}', response_model=None, tags=['user'])
def user_current_put_star(owner: str, repo: str = ...) -> None:
    """
    Star the given repo
    """
    pass


@app.delete('/user/starred/{owner}/{repo}', response_model=None, tags=['user'])
def user_current_delete_star(owner: str, repo: str = ...) -> None:
    """
    Unstar the given repo
    """
    pass


@app.get('/user/stopwatches', response_model=List[StopWatch], tags=['user'])
def user_get_stop_watches(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[StopWatch]:
    """
    Get list of all existing stopwatches
    """
    pass


@app.get('/user/subscriptions', response_model=List[Repository], tags=['user'])
def user_current_list_subscriptions(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[Repository]:
    """
    List repositories watched by the authenticated user
    """
    pass


@app.get('/user/teams', response_model=List[Team], tags=['user'])
def user_list_teams(
    page: Optional[int] = None, limit: Optional[int] = None
) -> List[Team]:
    """
    List all the teams a user belongs to
    """
    pass


@app.get('/user/times', response_model=List[TrackedTime], tags=['user'])
def user_current_tracked_times(
    page: Optional[int] = None,
    limit: Optional[int] = None,
    since: Optional[datetime] = None,
    before: Optional[datetime] = None,
) -> List[TrackedTime]:
    """
    List the current user's tracked times
    """
    pass


@app.get('/users/search', response_model=UsersSearchGetResponse, tags=['user'])
def user_search(
    q: Optional[str] = None,
    uid: Optional[int] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> UsersSearchGetResponse:
    """
    Search for users
    """
    pass


@app.get('/users/{username}', response_model=User, tags=['user'])
def user_get(username: str) -> User:
    """
    Get a user
    """
    pass


@app.get('/users/{username}/followers', response_model=List[User], tags=['user'])
def user_list_followers(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List the given user's followers
    """
    pass


@app.get('/users/{username}/following', response_model=List[User], tags=['user'])
def user_list_following(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[User]:
    """
    List the users that the given user is following
    """
    pass


@app.get('/users/{username}/following/{target}', response_model=None, tags=['user'])
def user_check_following(username: str, target: str = ...) -> None:
    """
    Check if one user is following another user
    """
    pass


@app.get('/users/{username}/gpg_keys', response_model=List[GPGKey], tags=['user'])
def user_list_g_p_g_keys(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[GPGKey]:
    """
    List the given user's GPG keys
    """
    pass


@app.get(
    '/users/{username}/heatmap', response_model=List[UserHeatmapData], tags=['user']
)
def user_get_heatmap_data(username: str) -> List[UserHeatmapData]:
    """
    Get a user's heatmap
    """
    pass


@app.get('/users/{username}/keys', response_model=List[PublicKey], tags=['user'])
def user_list_keys(
    username: str,
    fingerprint: Optional[str] = None,
    page: Optional[int] = None,
    limit: Optional[int] = None,
) -> List[PublicKey]:
    """
    List the given user's public keys
    """
    pass


@app.get(
    '/users/{username}/orgs', response_model=List[Organization], tags=['organization']
)
def org_list_user_orgs(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[Organization]:
    """
    List a user's organizations
    """
    pass


@app.get(
    '/users/{username}/orgs/{org}/permissions',
    response_model=OrganizationPermissions,
    tags=['organization'],
)
def org_get_user_permissions(username: str, org: str = ...) -> OrganizationPermissions:
    """
    Get user permissions in organization
    """
    pass


@app.get('/users/{username}/repos', response_model=List[Repository], tags=['user'])
def user_list_repos(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[Repository]:
    """
    List the repos owned by the given user
    """
    pass


@app.get('/users/{username}/starred', response_model=List[Repository], tags=['user'])
def user_list_starred(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[Repository]:
    """
    The repos that the given user has starred
    """
    pass


@app.get(
    '/users/{username}/subscriptions', response_model=List[Repository], tags=['user']
)
def user_list_subscriptions(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[Repository]:
    """
    List the repositories watched by a user
    """
    pass


@app.get('/users/{username}/tokens', response_model=List[AccessToken], tags=['user'])
def user_get_tokens(
    username: str, page: Optional[int] = None, limit: Optional[int] = None
) -> List[AccessToken]:
    """
    List the authenticated user's access tokens
    """
    pass


@app.post(
    '/users/{username}/tokens',
    response_model=None,
    responses={'201': {'model': AccessToken}},
    tags=['user'],
)
def user_create_token(
    username: str, body: CreateAccessTokenOption = None
) -> Union[None, AccessToken]:
    """
    Create an access token
    """
    pass


@app.delete('/users/{username}/tokens/{token}', response_model=None, tags=['user'])
def user_delete_access_token(username: str, token: str = ...) -> None:
    """
    delete an access token
    """
    pass


@app.get('/version', response_model=ServerVersion, tags=['miscellaneous'])
def get_version() -> ServerVersion:
    """
    Returns the version of the AllSpice application
    """
    pass
